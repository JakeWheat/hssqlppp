{-


Contains bit and pieces of type checking which don't fit anywhere else

================================================================================

= type names

Types with type modifiers (called PrecTypeName here, to be changed),
are not supported at the moment.

-}

ATTR TypeName [||namedType : {Maybe Type}]

SEM TypeName
     | SimpleTypeName ArrayTypeName SetOfTypeName PrecTypeName Prec2TypeName
         lhs.namedType = etmt @loc.tpe
         lhs.annotatedTree = addTypeErrors (tes @loc.tpe) @loc.backTree

SEM TypeName
     | SimpleTypeName
        loc.tpe = catLookupType @lhs.cat $ canonicalizeTypeName @tn
        loc.backTree = SimpleTypeName @ann @tn
     | ArrayTypeName
        loc.tpe = lmt @typ.namedType >>=  Right . ArrayType
        loc.backTree = ArrayTypeName @ann @typ.annotatedTree
     | SetOfTypeName
        loc.tpe = lmt @typ.namedType >>=  Right . SetOfType
        loc.backTree = SetOfTypeName @ann @typ.annotatedTree
     | PrecTypeName
        loc.tpe = catLookupType @lhs.cat $ canonicalizeTypeName @tn
        loc.backTree = PrecTypeName @ann @tn @prec
     | Prec2TypeName
        loc.tpe = catLookupType @lhs.cat $ canonicalizeTypeName @tn
        loc.backTree = Prec2TypeName @ann @tn @prec @prec1


{-
================================================================================

= generic node types


== Name
will be used for all possibly schema qualified strings

Just used for table names atm in the type checking.

The two attributes are the annotatedTree for a tablename context:
tbAnnotatedTree, and the type for this context: tbUType.

This code attaches table not found errors, as well as gets the column
names and types for a recognised table.

-}



ATTR Name [||tbUType : {Maybe ([(String,Type)],[(String,Type)])}
                     tbAnnotatedTree : Name]

SEM Name
    | Name
        loc.tpe : {E ([(String,Type)],[(String,Type)])}
        loc.tpe = catCompositeAttrsPair @lhs.cat relationComposites
                     (getUnqual @is) -- todo - needs fixing to not ignore qualifiers
        lhs.tbUType = either (const Nothing) Just @loc.tpe
        lhs.tbAnnotatedTree =
              updateAnnotation
                (\a -> a {errs = errs a ++ tes @loc.tpe}) @loc.backTree
        loc.backTree = Name @ann @is

{
getUnqual :: [NameComponent] -> String
getUnqual [] = error $ "empty name component"
getUnqual x = ncStr $ last x
}

{-
================================================================================

= some small utils

-}
{

addTypeErrors :: Data a => [TypeError] -> a -> a
addTypeErrors es el = updateAnnotation u el
                      where
                        u a = a {errs = errs a ++ es}

setTypeAddErrors :: Data a => Et -> a -> a
setTypeAddErrors et el = updateAnnotation (setTypeAddErrorsA et) el

setTypeAddErrorsA :: Et -> Annotation -> Annotation
setTypeAddErrorsA et a =
    let a1 = a {errs = errs a ++ tes et}
    in case atype a1 of
         Just _ -> a1 {errs = errs a
                             ++ [InternalError $ "tried to set type a second time - " ++ show (etmt et)]}
         Nothing -> a1 {atype = etmt et}

allJust :: [Maybe a] -> Maybe [a]
allJust ts = sequence ts

-- bit dogdy, needs some thought
-- this is just to convert the new approach of using "." as an operator
-- to construct names, with the old approach which stuck the whole lot
-- in a string
getName :: ScalarExpr -> String
getName (Identifier _ i) = ncStr i
getName (FunCall _ f [Identifier _ _,Identifier _ i]) | getTName f == "." = ncStr i
getName (FunCall _ f [_,a]) | getTName f == "." = getName a
getName x = error $ "internal error getName called on: " ++ show x

getTName :: Name -> String
getTName (Name _ n) = getUnqual n
--getTName x = error $ "internal error getName called on: " ++ show x


unwrapLookup :: (String,[String],Type) -> Type
unwrapLookup (_,_,t) = t

allAtts :: ([(String,Type)],[(String,Type)]) -> [(String,Type)]
allAtts (a,b) = a ++ b
}
