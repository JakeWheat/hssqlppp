Here are some limited notes on working on the source of hssqlppp:

Get the source
==============

Please use the code from git to develop with, one way to get it is to
run:

~~~~~
git clone https://github.com/JakeWheat/hssqlppp.git
~~~~~

Build the library
=================

There is a Makefile to help with developing hssqlppp. You can use:

~~~~
make sandbox
~~~~

to initialize the shared sandbox, and then

~~~~
make hssqlppp
~~~~

To build the main library. This also builds the cabal tests for this
library, and installs the library into the sandbox.

You can also build all the code, the tests and the examples using

~~~~
make all
~~~~

All of these builds will use the cabal sandbox if you run make sandbox
first. You don't need to rerun make sandbox unless you change the
packages in the cabal files.

uuagc
=====

The .ag files are processed to produce a single file,
AstInternal.hs. The makefile should handle this automatically. You can
also call 'make src/Database/HsSqlPpp/Internals/AstInternal.hs' to
regenerate manually.

There is one further generated file, DefaultTemplate1Catalog.lhs. You
don't usually need to regenerate this, but this is how you do it:

~~~~~
make regenDefaultTemplate1Catalog
~~~~~

If you use a recent version of Postgres, you will get items in the
catalog which hssqlppp doesn't understand and break the typechecking.

Build and run the tests
=======================

You can build and run the tests using the makefile. You should run
make sandbox first if you haven't already, then run:

~~~~~
make test
~~~~~

This is a good target to use in your edit/compile/test cycle.

Background reading
==================

The main things used in hssqlppp are: parsec, uuagc, generics,
quasiquoting, pretty printing.

Parsec is used for parsing:
Here is a tutorial for parsec which is outdated but isn't too bad for
getting started: <http://legacy.cs.uu.nl/daan/parsec.html>

Chapter in Real World Haskell on parsec:
<http://book.realworldhaskell.org/read/using-parsec.html>

UUAGC is used to assist the typechecking. It is also used to define
the ast data types:
<http://www.cs.uu.nl/wiki/bin/view/HUT/AttributeGrammarSystem>

A tutorial, not that easy to follow:
<http://www.cs.uu.nl/wiki/bin/view/HUT/AttributeGrammarManual>

Pretty printing:
<http://hackage.haskell.org/package/pretty>

Generics:
Just uses a bit of this at the moment, mostly uses uniplate:
<http://community.haskell.org/~ndm/uniplate/>

Quasiquotation:
<http://www.haskell.org/haskellwiki/Quasiquotation>

The automated tests use test-framework and HUnit.

Source overview
===============

A good place to start is with the syntax, which is in uuagc format in
the file src/Database/HsSqlPpp/Internals/AstInternal.ag. The main
parsing code might also be interesting:
src/Database/HsSqlPpp/Parsing/ParserInternal.lhs. There is also a
separate lexer: src/Database/HsSqlPpp/Parsing/Lexing.lhs. Both use
parsec. There is no particular reason behind this design, maybe
something else for the lexer, or a different parser library would work
better.

To get stuck into the typechecking, a good place to start is the
scalar expression typechecking code, which is in
src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag. There is
no separation in the code between the syntax and semantics.

Other interesting files are:
src/Database/HsSqlPpp/Internals/Catalog/CatalogInternals.lhs, which
handles the catalog datatype and implements a fair bit of the type
checking support, and src/Database/HsSqlPpp/Internals/IDEnv.lhs which
contains most of the rest of the type checking support, works with the
identifiers in the env which aren't part of the catalog.

There are a few index.txt files in the source which give a little info
on what is in the various folders.

A short guide on [adding Syntax](adding_syntax.txt.html).
